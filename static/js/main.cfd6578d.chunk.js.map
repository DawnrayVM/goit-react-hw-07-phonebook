{"version":3,"sources":["Components/Phonebook/Phonebook.module.css","redux/actions.js","redux/operations.js","Components/Phonebook/PhonebookForm.jsx","Components/ContactsFilter/ContactsFilter.jsx","Components/Contacts/Contacts.jsx","App.js","redux/reducers.js","redux/store.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsFail","addContactRequest","addContactSuccess","addContactFail","deleteContactRequest","deleteContactSuccess","deleteContactFail","findContact","axios","defaults","baseURL","INIT_STATE","name","number","connect","state","contacts","dispatch","onSubmitForm","contact","actions","post","then","data","catch","error","addContact","useState","setState","onChange","e","currentTarget","value","className","styles","title","onSubmit","preventDefault","container","formItem","type","pattern","required","phonebookBtn","useStyles","createUseStyles","filterForm","fontFamily","width","marginTop","padding","border","borderRadius","boxShadow","filterInput","fontSize","filter","classes","length","contactsList","flexDirection","deleteBtn","display","borderStyle","fontWeight","color","textDecoration","background","transition","listItem","justifyContent","alignItems","marginBottom","listText","margin","getVisibleContacts","toLowerCase","includes","onDelete","id","contactId","delete","map","onClick","getContacts","get","useEffect","contactsReducer","createReducer","payload","Object","values","alert","_","filterReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfd6578d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Phonebook_title__tF3MX\",\"container\":\"Phonebook_container__3e6O0\",\"formItem\":\"Phonebook_formItem__2vma7\",\"phonebookBtn\":\"Phonebook_phonebookBtn__1v8Jq\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactsRequest = createAction('contacts/getContactsRequest');\r\nexport const fetchContactsSuccess = createAction('contacts/getContactsSuccess');\r\nexport const fetchContactsFail = createAction('contacts/getContactsFail');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactFail = createAction('contacts/addContactFail');\r\n\r\nexport const deleteContactRequest = createAction(\r\n    'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n    'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactFail = createAction('contacts/deleteContactFail');\r\n\r\nexport const findContact = createAction('contactsFilter/filterContact');\r\n","import axios from 'axios';\r\nimport * as actions from './actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n    dispatch(actions.fetchContactsRequest());\r\n    axios\r\n        .get('/contacts')\r\n        .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\r\n        .catch(error => {\r\n            dispatch(actions.fetchContactsFail(error));\r\n        });\r\n};\r\n\r\nconst addContact = contact => dispatch => {\r\n    dispatch(actions.addContactRequest());\r\n    axios\r\n        .post('/contacts', contact)\r\n        .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n        .catch(error => dispatch(actions.addContactFail(error)));\r\n};\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n    dispatch(actions.deleteContactRequest());\r\n    axios\r\n        .delete(`/contacts/${contactId}`)\r\n        .then(() => dispatch(actions.deleteContactSuccess(contactId)))\r\n        .catch(error => {\r\n            dispatch(actions.deleteContactFail(error));\r\n        });\r\n};\r\n\r\nexport { fetchContacts, addContact, deleteContact };\r\n","import { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addContact } from '../../redux/operations';\r\nimport styles from './Phonebook.module.css';\r\n\r\nconst INIT_STATE = { name: '', number: '' };\r\n\r\nconst PhonebookForm = ({ onSubmitForm }) => {\r\n    const [state, setState] = useState(INIT_STATE);\r\n\r\n    const onChange = e => {\r\n        setState({ ...state, [e.currentTarget.name]: e.currentTarget.value });\r\n    };\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        onSubmitForm(state);\r\n        setState(INIT_STATE);\r\n    };\r\n    return (\r\n        <>\r\n            <h2 className={styles.title}>Phonebook</h2>\r\n            <form onSubmit={onSubmit} className={styles.container}>\r\n                <label className={styles.formItem}>\r\n                    Name:\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        value={state.name}\r\n                        onChange={onChange}\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                        required\r\n                    />\r\n                </label>\r\n                <label className={styles.formItem}>\r\n                    Number:\r\n                    <input\r\n                        type=\"tel\"\r\n                        name=\"number\"\r\n                        pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n                        title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n                        required\r\n                        value={state.number}\r\n                        onChange={onChange}\r\n                    />\r\n                </label>\r\n                <button type=\"Submit\" className={styles.phonebookBtn}>\r\n                    Add contact\r\n                </button>\r\n            </form>\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: state.contacts,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmitForm: contact => dispatch(addContact(contact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PhonebookForm);\r\n","import { createUseStyles } from 'react-jss';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../redux/actions';\r\n\r\nconst useStyles = createUseStyles({\r\n    filterForm: {\r\n        fontFamily: 'Roboto',\r\n        width: 370,\r\n        marginTop: 10,\r\n        padding: '15px 10px',\r\n        border: '1px solid rgba(225, 225, 225, 10)',\r\n        borderRadius: 5,\r\n        boxShadow: '3px 3px 5px 0px rgba(225, 225, 225, 10)',\r\n    },\r\n    filterInput: {\r\n        fontSize: 20,\r\n        width: 360,\r\n    },\r\n});\r\n\r\nconst ContactsFilter = ({ contacts, filter, onChange }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        contacts.length > 0 && (\r\n            <form className={classes.filterForm}>\r\n                <label>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={filter}\r\n                        onChange={onChange}\r\n                        className={classes.filterInput}\r\n                    />\r\n                </label>\r\n            </form>\r\n        )\r\n    );\r\n};\r\nconst mapStateToProps = state => ({\r\n    contacts: state.contacts,\r\n    filter: state.filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: e => dispatch(actions.findContact(e.currentTarget.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsFilter);\r\n","import { createUseStyles } from 'react-jss';\r\nimport { connect } from 'react-redux';\r\nimport { deleteContact } from '../../redux/operations';\r\n\r\nconst useStyles = createUseStyles({\r\n    contactsList: {\r\n        flexDirection: 'column',\r\n        fontFamily: 'Roboto',\r\n        fontSize: 20,\r\n        width: 370,\r\n        marginTop: 10,\r\n        padding: '10px 10px',\r\n        border: '1px solid rgba(225, 225, 225, 10)',\r\n        borderRadius: 5,\r\n        boxShadow: '3px 3px 5px 0px rgba(225, 225, 225, 10)',\r\n    },\r\n    deleteBtn: {\r\n        display: 'block',\r\n        width: 100,\r\n        borderStyle: 'none',\r\n        fontWeight: 500,\r\n        fontSize: 16,\r\n        color: 'white',\r\n        textDecoration: 'none',\r\n        padding: '5px 10px',\r\n        borderRadius: 3,\r\n        background: 'rgb(64,199,129)',\r\n        boxShadow: '0 -3px rgb(53,167,110) inset',\r\n        transition: '0.2s',\r\n        '&:hover': { background: 'rgb(53, 167, 110)' },\r\n        '&:active': {\r\n            background: 'rgb(33,147,90)',\r\n            boxShadow: '0 3px rgb(33,147,90) inset',\r\n        },\r\n    },\r\n    listItem: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        marginBottom: 5,\r\n        '&:last-child': { marginBottom: 0 },\r\n    },\r\n    listText: {\r\n        margin: 0,\r\n    },\r\n});\r\n\r\nconst Contacts = ({ contacts, onDelete }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        contacts.length > 0 && (\r\n            <ul className={classes.contactsList}>\r\n                {contacts.map(({ name, number, id }) => (\r\n                    <li key={id} className={classes.listItem}>\r\n                        <p className={classes.listText}>\r\n                            {name}: {number}\r\n                        </p>\r\n                        <button\r\n                            type=\"button\"\r\n                            onClick={() => onDelete(id)}\r\n                            className={classes.deleteBtn}\r\n                        >\r\n                            Delete\r\n                        </button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        )\r\n    );\r\n};\r\n\r\nconst getVisibleContacts = (contacts, filter) =>\r\n    contacts.filter(({ name }) =>\r\n        name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n\r\nconst mapStateToProps = ({ contacts, filter }) => ({\r\n    contacts: getVisibleContacts(contacts, filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onDelete: id => dispatch(deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\r\n","import { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { fetchContacts } from './redux/operations';\r\nimport PhonebookForm from './Components/Phonebook';\r\nimport ContactsFilter from './Components/ContactsFilter';\r\nimport Contacts from './Components/Contacts';\r\n\r\nconst App = ({ getContacts }) => {\r\n    useEffect(() => {\r\n        getContacts();\r\n    });\r\n    return (\r\n        <main>\r\n            <PhonebookForm />\r\n            <ContactsFilter />\r\n            <Contacts />\r\n        </main>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    getContacts: () => dispatch(fetchContacts()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport * as actions from '../redux/actions';\r\n\r\nconst contactsReducer = createReducer([], {\r\n    [actions.addContactSuccess]: (state, { payload }) =>\r\n        Object.values(\r\n            state.map(({ name }) => name).includes(payload.name)\r\n                ? (alert('Contact with such name already exists'), [...state])\r\n                : [...state, payload],\r\n        ),\r\n    [actions.deleteContactSuccess]: (state, { payload }) =>\r\n        state.filter(({ id }) => id !== payload),\r\n    [actions.fetchContactsSuccess]: (_, { payload }) => [...payload],\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n    [actions.findContact]: (_, { payload }) => payload,\r\n});\r\n\r\nexport { contactsReducer, filterReducer };\r\n","import {\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist';\r\nimport logger from 'redux-logger';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n\r\nimport { contactsReducer, filterReducer } from './reducers';\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }),\r\n    logger,\r\n];\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: contactsReducer,\r\n        filter: filterReducer,\r\n    },\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}